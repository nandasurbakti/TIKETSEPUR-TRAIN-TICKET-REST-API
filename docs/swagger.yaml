basePath: /api/v1
definitions:
  dto.CreateScheduleRequest:
    properties:
      arrival_station:
        type: string
      arrival_time:
        type: string
      available_seats:
        minimum: 0
        type: integer
      departure_station:
        type: string
      departure_time:
        type: string
      price:
        minimum: 0
        type: number
      train_id:
        type: integer
    required:
    - arrival_station
    - arrival_time
    - available_seats
    - departure_station
    - departure_time
    - price
    - train_id
    type: object
  dto.CreateTicketRequest:
    properties:
      passenger_id_number:
        type: string
      passenger_name:
        type: string
      payment_method:
        enum:
        - bank_transfer
        - e-wallet
        - credit_card
        type: string
      schedule_id:
        type: integer
      seat_number:
        type: string
    required:
    - passenger_id_number
    - passenger_name
    - payment_method
    - schedule_id
    - seat_number
    type: object
  dto.CreateTrainRequest:
    properties:
      total_seats:
        minimum: 1
        type: integer
      train_code:
        type: string
      train_name:
        type: string
      train_type:
        type: string
    required:
    - total_seats
    - train_code
    - train_name
    - train_type
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        minLength: 6
        type: string
      phone:
        type: string
      role:
        enum:
        - admin
        - user
        type: string
    required:
    - email
    - full_name
    - password
    - role
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      token:
        type: string
      user: {}
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        minLength: 6
        type: string
      phone:
        type: string
    required:
    - email
    - full_name
    - password
    - phone
    type: object
  dto.UpdateTrainRequest:
    properties:
      total_seats:
        minimum: 1
        type: integer
      train_code:
        type: string
      train_name:
        type: string
      train_type:
        type: string
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      phone:
        type: string
      role:
        enum:
        - admin
        - user
        type: string
    type: object
  models.Payment:
    properties:
      created_at:
        type: string
      id:
        type: integer
      modified_at:
        type: string
      paid_at:
        type: string
      payment_amount:
        type: number
      payment_code:
        type: string
      payment_method:
        type: string
      payment_status:
        type: string
      ticket_id:
        type: integer
    type: object
  models.Schedule:
    properties:
      arrival_station:
        type: string
      arrival_time:
        type: string
      available_seats:
        type: integer
      created_at:
        type: string
      departure_station:
        type: string
      departure_time:
        type: string
      id:
        type: integer
      modified_at:
        type: string
      price:
        type: number
      train_id:
        type: integer
      trainCode:
        type: string
      trainName:
        type: string
      trainType:
        type: string
    type: object
  models.Ticket:
    properties:
      booking_code:
        type: string
      created_at:
        type: string
      id:
        type: integer
      modified_at:
        type: string
      passenger_id_number:
        type: string
      passenger_name:
        type: string
      payment:
        $ref: '#/definitions/models.Payment'
      schedule:
        $ref: '#/definitions/models.Schedule'
      schedule_id:
        type: integer
      seat_number:
        type: string
      status:
        type: string
      total_price:
        type: number
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.Train:
    properties:
      created_at:
        type: string
      id:
        type: integer
      modified_at:
        type: string
      total_seats:
        type: integer
      train_code:
        type: string
      train_name:
        type: string
      train_type:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      modified_at:
        type: string
      phone:
        type: string
      role:
        type: string
    type: object
  utils.Response:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API Server untuk aplikasi pemesanan tiket kereta api TiketSepur
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: TiketSepur API
  version: "1.0"
paths:
  /admin/schedules:
    get:
      consumes:
      - application/json
      description: Get all train schedules (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: List of schedules
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Schedule'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all schedules
      tags:
      - schedules
  /admin/tickets:
    get:
      consumes:
      - application/json
      description: Get all tickets in the system (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: List of all tickets
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Ticket'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all tickets
      tags:
      - tickets
  /admin/trains:
    post:
      consumes:
      - application/json
      description: Create a new train entry
      parameters:
      - description: Train details
        in: body
        name: train
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTrainRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Train created successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Train'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create a new train
      tags:
      - trains
  /admin/trains/{id}:
    put:
      consumes:
      - application/json
      description: Update train details
      parameters:
      - description: Train ID
        in: path
        name: id
        required: true
        type: integer
      - description: Train details to update
        in: body
        name: train
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateTrainRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Train updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Train'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update train
      tags:
      - trains
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get list of all users (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.User'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Authentication failed
          schema:
            $ref: '#/definitions/utils.Response'
      summary: User login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate token
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Logout failed
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get information about the currently logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: User info retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get current user info
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Register new user
      tags:
      - auth
  /auth/register-admin:
    post:
      consumes:
      - application/json
      description: Register a new admin user account
      parameters:
      - description: Admin registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Admin registered successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Register admin user
      tags:
      - auth
  /payments/confirm/{paymentCode}:
    post:
      consumes:
      - application/json
      description: Confirm a payment for a ticket booking
      parameters:
      - description: Payment Code
        in: path
        name: paymentCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Payment confirmed
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Invalid payment code
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Confirm payment
      tags:
      - payments
  /payments/status/{paymentCode}:
    get:
      consumes:
      - application/json
      description: Get the current status of a payment
      parameters:
      - description: Payment Code
        in: path
        name: paymentCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Payment status
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Invalid payment code
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get payment status
      tags:
      - payments
  /schedules:
    get:
      consumes:
      - application/json
      description: Get all available train schedules for public
      produces:
      - application/json
      responses:
        "200":
          description: List of schedules
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Schedule'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get all public schedules
      tags:
      - schedules
    post:
      consumes:
      - application/json
      description: Create a new train schedule
      parameters:
      - description: Schedule details
        in: body
        name: schedule
        required: true
        schema:
          $ref: '#/definitions/dto.CreateScheduleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Schedule created successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Schedule'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create a new schedule
      tags:
      - schedules
  /schedules/{id}:
    get:
      consumes:
      - application/json
      description: Get train schedule by its ID
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Schedule details
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Schedule'
              type: object
        "404":
          description: Schedule not found
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get schedule by ID
      tags:
      - schedules
  /schedules/search:
    get:
      consumes:
      - application/json
      description: Search train schedules by criteria
      parameters:
      - description: Origin station
        in: query
        name: origin
        type: string
      - description: Destination station
        in: query
        name: destination
        type: string
      - description: Travel date (YYYY-MM-DD)
        in: query
        name: date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of matching schedules
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Schedule'
                  type: array
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Search schedules
      tags:
      - schedules
  /tickets:
    post:
      consumes:
      - application/json
      description: Create a new ticket booking
      parameters:
      - description: Ticket booking details
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTicketRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Ticket booked successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Ticket'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Book a new ticket
      tags:
      - tickets
  /tickets/{id}:
    get:
      consumes:
      - application/json
      description: Get ticket details by ticket ID
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Ticket details
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Ticket'
              type: object
        "404":
          description: Ticket not found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get ticket by ID
      tags:
      - tickets
  /tickets/{id}/cancel:
    post:
      consumes:
      - application/json
      description: Cancel a booked ticket
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Ticket cancelled successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Failed to cancel ticket
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Cancel ticket
      tags:
      - tickets
  /tickets/my-tickets:
    get:
      consumes:
      - application/json
      description: Get all tickets booked by the current user
      produces:
      - application/json
      responses:
        "200":
          description: List of user's tickets
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Ticket'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get user's tickets
      tags:
      - tickets
  /trains:
    get:
      consumes:
      - application/json
      description: Get list of all trains
      produces:
      - application/json
      responses:
        "200":
          description: List of trains
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Train'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get all trains
      tags:
      - trains
  /trains/{id}:
    get:
      consumes:
      - application/json
      description: Get train details by ID
      parameters:
      - description: Train ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Train details
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Train'
              type: object
        "404":
          description: Train not found
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get train by ID
      tags:
      - trains
  /users:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user account
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Failed to delete user
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user details
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User details to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
